# generated by datamodel-codegen:
#   filename:  all.json
#   timestamp: 2025-07-21T21:26:03+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel


class CaseSubject(BaseModel):
    enumValue: int
    displayText: str


class CaseTag(BaseModel):
    id: str
    displayText: str


class VerdictStatus(BaseModel):
    enumValue: int
    displayText: str


class SpecialLegalAction(BaseModel):
    enumValue: int
    displayText: str


class Type(BaseModel):
    enumValue: int
    displayText: str


class Role(BaseModel):
    enumValue: int
    displayText: str


class Participant(BaseModel):
    type: Type
    role: Role
    name: str


class HorizontalCotreatmentCase(BaseModel):
    id: str
    revokedDateTime: None
    courtCaseNumber: str
    officeAbbreviation: str
    officeName: str


class AppealType(BaseModel):
    enumValue: int
    displayText: str


class Profession(BaseModel):
    enumValue: int
    displayText: str


class Instance(BaseModel):
    enumValue: int
    displayText: str


class CaseType(BaseModel):
    enumValue: int
    displayText: str


class AppealCase(BaseModel):
    caseworkerCaseNumber: str
    index: int
    appealType: AppealType
    derivesFromSpecialRequest: bool
    hasHorizontalCotreatment: bool
    hasVerticalCotreatment: bool
    profession: Profession
    instance: Instance
    caseType: CaseType
    id: str
    revokedDateTime: Optional[str]
    courtCaseNumber: str
    officeAbbreviation: str
    officeName: str


class VerticalCotreatmentGroup(BaseModel):
    appealCases: List[AppealCase]


class DocumentType(BaseModel):
    enumValue: int
    displayText: str


class Reference(BaseModel):
    markingId: str
    content: str
    type: str


class Document(BaseModel):
    contentHtml: Optional[str]
    contentPdf: Optional[str]
    id: str
    displayTitle: Optional[str]
    revokedDateTime: Optional[str]
    documentType: DocumentType
    verdictDateTime: Optional[str]
    ecli: Optional[str]
    references: List[Reference]


class ModelItem(BaseModel):
    caseSubjects: List[CaseSubject]
    caseTags: List[CaseTag]
    headline: Optional[str]
    hasHorizontalCotreatment: Optional[bool]
    hasVerticalCotreatment: Optional[bool]
    caseworkerCaseNumber: str
    verdictStatus: Optional[VerdictStatus]
    specialLegalActions: List[SpecialLegalAction]
    participants: List[Participant]
    horizontalCotreatmentCases: Optional[List[HorizontalCotreatmentCase]]
    verticalCotreatmentGroups: Optional[List[VerticalCotreatmentGroup]]
    closedCourtroom: Optional[bool]
    rightOfAccessExemption: Optional[bool]
    liftedOutOfSmallCaseProcess: Optional[bool]
    recognitionClaim: Optional[bool]
    monetaryClaim: Optional[str]
    politietsJournalnummer: Optional[str]
    documents: List[Document]
    profession: Profession
    instance: Instance
    caseType: CaseType
    id: str
    revokedDateTime: Optional[str]
    courtCaseNumber: str
    officeAbbreviation: str
    officeName: str
    author: Optional[str]


class Model(BaseModel):
    __root__: List[List[ModelItem]]
